import requests
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = '7892638380:AAEE2HMiUBPzL_VyB7m1XUHYxrrPm4EarEo'
OWM_API_KEY = '7c43d41fec48024dae1a86734ba7ac14'

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
LOCATIONS = {
    'grigoropolisskaya': {
        'name': '–ì—Ä–∏–≥–æ—Ä–æ–ø–æ–ª–∏—Å—Å–∫–∞—è',
        'lat': 45.2972,
        'lon': 40.6667
    },
    'mishelevka': {
        'name': '–ú–∏—à–µ–ª–µ–≤–∫–∞',
        'lat': 52.8558,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —É—Ç–æ—á–Ω–∏—Ç–µ!
        'lon': 103.1706
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def location_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ì—Ä–∏–≥–æ—Ä–æ–ø–æ–ª–∏—Å—Å–∫–∞—è", callback_data='grigoropolisskaya')],
        [InlineKeyboardButton("–ú–∏—à–µ–ª–µ–≤–∫–∞", callback_data='mishelevka')]
    ])

def main_menu_keyboard():
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üïí –°–µ–π—á–∞—Å", callback_data='current')],
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è –ø–æ —á–∞—Å–∞–º", callback_data='today')],
        [InlineKeyboardButton("üåû –ó–∞–≤—Ç—Ä–∞", callback_data='tomorrow')],
        [InlineKeyboardButton("üìÜ –ù–µ–¥–µ–ª—è", callback_data='week')],
        [InlineKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –¥–µ—Ä–µ–≤–Ω—é", callback_data='change_city')]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await show_location_choice(update, context)

async def show_location_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞"""
    query = update.callback_query
    text = "üìç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:"
    keyboard = location_keyboard()

    if query:
        await query.edit_message_text(text, reply_markup=keyboard)
    else:
        await update.message.reply_text(text, reply_markup=keyboard)

async def handle_location_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞"""
    query = update.callback_query
    await query.answer()

    location = LOCATIONS.get(query.data)
    if location:
        context.user_data['location'] = query.data
        await show_main_menu(query, location['name'])
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞")

async def show_main_menu(query, city_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    await query.edit_message_text(
        f"üå§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {city_name}:",
        reply_markup=main_menu_keyboard()
    )

async def handle_forecast_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    query = update.callback_query
    await query.answer()

    location = context.user_data.get('location')
    if not location:
        await show_location_choice(update, context)
        return

    if query.data == 'change_city':
        await show_location_choice(update, context)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    loc_data = LOCATIONS[location]

    try:
        if query.data == 'current':
            await send_current_weather(query, loc_data)
        elif query.data == 'today':
            await send_hourly_forecast(query, loc_data)
        elif query.data == 'tomorrow':
            await send_tomorrow_forecast(query, loc_data)
        elif query.data == 'week':
            await send_weekly_forecast(query, loc_data)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_menu_keyboard())

def get_weather_icon(icon_code):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤ –∏–∫–æ–Ω–æ–∫ –≤ —ç–º–æ–¥–∑–∏"""
    icons = {
        '01d': '‚òÄÔ∏è –Ø—Å–Ω–æ',         '01n': 'üåï –Ø—Å–Ω–∞—è –Ω–æ—á—å',
        '02d': '‚õÖ –ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ',   '02n': '‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ',
        '03d': '‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ',       '03n': '‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ',
        '04d': '‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ',      '04n': '‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ',
        '09d': 'üåßÔ∏è –ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å', '09n': 'üåßÔ∏è –ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å',
        '10d': 'üå¶Ô∏è –î–æ–∂–¥—å',         '10n': 'üå¶Ô∏è –ù–æ—á–Ω–æ–π –¥–æ–∂–¥—å',
        '11d': '‚õàÔ∏è –ì—Ä–æ–∑–∞',        '11n': '‚õàÔ∏è –ù–æ—á–Ω–∞—è –≥—Ä–æ–∑–∞',
        '13d': '‚ùÑÔ∏è –°–Ω–µ–≥',         '13n': '‚ùÑÔ∏è –°–Ω–µ–≥–æ–ø–∞–¥',
        '50d': 'üå´Ô∏è –¢—É–º–∞–Ω',        '50n': 'üå´Ô∏è –¢—É–º–∞–Ω'
    }
    return icons.get(icon_code, 'üåÄ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

def temp_to_color(temp):
    """–¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    if temp < -10:
        return "‚ùÑÔ∏èüîµ"  # –°–∏–Ω–∏–π - —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥
    elif temp < 0:
        return "üå®Ô∏èüîµ"  # –°–∏–Ω–∏–π - —Ö–æ–ª–æ–¥
    elif temp < 10:
        return "üåäüî∑"   # –ì–æ–ª—É–±–æ–π - –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ
    elif temp < 20:
        return "üåøüü¢"   # –ó–µ–ª–µ–Ω—ã–π - –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ
    elif temp < 30:
        return "‚òÄÔ∏èüü†"   # –û—Ä–∞–Ω–∂–µ–≤—ã–π - —Ç–µ–ø–ª–æ
    else:
        return "üî•üî¥"   # –ö—Ä–∞—Å–Ω—ã–π - –∂–∞—Ä–∞

def get_weather_warnings(weather_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –∞–Ω–æ–º–∞–ª–∏—è—Ö"""
    warnings = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    temp = weather_data['main']['temp']
    if temp > 35:
        warnings.append("‚ö†Ô∏èüî• –ê–Ω–æ–º–∞–ª—å–Ω–∞—è –∂–∞—Ä–∞! –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ —Ç–µ–Ω–∏.")
    elif temp < -15:
        warnings.append("‚ö†Ô∏è‚ùÑÔ∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥! –û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–∞–¥–∫–æ–≤
    if 'rain' in weather_data:
        if weather_data['rain'].get('1h', 0) > 20:
            warnings.append("‚ö†Ô∏èüåßÔ∏è –°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å! –í–æ–∑–º–æ–∂–Ω—ã –ø–æ–¥—Ç–æ–ø–ª–µ–Ω–∏—è.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ç—Ä–∞
    if weather_data['wind']['speed'] > 15:
        warnings.append("‚ö†Ô∏èüå™Ô∏è –®—Ç–æ—Ä–º–æ–≤–æ–π –≤–µ—Ç–µ—Ä! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–æ–∑—ã
    if any(w['main'] == 'Thunderstorm' for w in weather_data['weather']):
        warnings.append("‚ö†Ô∏è‚õàÔ∏è –ì—Ä–æ–∑–∞! –ò–∑–±–µ–≥–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤.")

    return warnings

async def send_current_weather(query, loc_data):
    """–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"""
    data = get_weather_data('weather', loc_data)
    icon = get_weather_icon(data['weather'][0]['icon'])
    temp = data['main']['temp']
    color = temp_to_color(temp)
    warnings = get_weather_warnings(data)

    message = ""
    if warnings:
        message += "üö® " + "\nüö® ".join(warnings) + "\n\n"

    message += (
        f"{color} {icon}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"ü•∂ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C\n"
        f"üí® –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%"
    )

    await query.edit_message_text(message, reply_markup=main_menu_keyboard())

async def send_hourly_forecast(query, loc_data):
    """–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π"""
    data = get_weather_data('forecast', loc_data)
    forecast = []

    for item in data['list'][:8]:
        time = datetime.fromtimestamp(item['dt']).strftime('%H:%M')
        icon = get_weather_icon(item['weather'][0]['icon'])
        color = temp_to_color(item['main']['temp'])
        forecast.append(f"{time} {icon} {color} {item['main']['temp']}¬∞C")

    message = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {loc_data['name']}:\n" + "\n".join(forecast)

    # –û–±—â–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    all_warnings = []
    for item in data['list'][:8]:
        all_warnings.extend(get_weather_warnings(item))

    if all_warnings:
        unique_warnings = list(set(all_warnings))
        message = "üö® " + "\nüö® ".join(unique_warnings) + "\n\n" + message

    await query.edit_message_text(message, reply_markup=main_menu_keyboard())

async def send_tomorrow_forecast(query, loc_data):
    """–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏"""
    try:
        data = get_weather_data('forecast', loc_data)
        now = datetime.now()
        tomorrow = now + timedelta(days=1)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        target_date = tomorrow.date()
        period_data = [
            item for item in data['list']
            if datetime.fromtimestamp(item['dt']).date() == target_date
        ]

        if not period_data:
            await query.edit_message_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã", reply_markup=main_menu_keyboard())
            return

        periods = {
            'üåÖ –£—Ç—Ä–æ': (6, 12),
            '‚òÄÔ∏è –î–µ–Ω—å': (12, 18),
            'üåÜ –í–µ—á–µ—Ä': (18, 23),
            'üåô –ù–æ—á—å': (23, 6)
        }

        forecast = []
        for period_name, (start_hour, end_hour) in periods.items():
            period_items = [
                item for item in period_data
                if is_time_period(item['dt'], target_date, start_hour, end_hour)
            ]

            if not period_items:
                continue

            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            avg_temp = sum(item['main']['temp'] for item in period_items) / len(period_items)

            # –í—ã–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–π –∏–∫–æ–Ω–∫–∏
            icon_counter = {}
            for item in period_items:
                icon = item['weather'][0]['icon']
                icon_counter[icon] = icon_counter.get(icon, 0) + 1

            most_common_icon = max(icon_counter, key=icon_counter.get)
            icon_emoji = get_weather_icon(most_common_icon)

            forecast.append(
                f"{period_name}: {icon_emoji} {avg_temp:.1f}¬∞C"
            )

        if not forecast:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è", reply_markup=main_menu_keyboard())
            return

        message = (
            f"üåû –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ {loc_data['name']}:\n"
            f"{'\n'.join(forecast)}"
        )

        await query.edit_message_text(message, reply_markup=main_menu_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_menu_keyboard())

async def send_weekly_forecast(query, loc_data):
    """–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    try:
        data = get_weather_data('forecast', loc_data)
        daily_data = {}
        periods = {
            'üåÖ –£—Ç—Ä–æ': (6, 12),
            '‚òÄÔ∏è –î–µ–Ω—å': (12, 18),
            'üåÜ –í–µ—á–µ—Ä': (18, 23),
            'üåô –ù–æ—á—å': (23, 6)
        }

        for item in data['list']:
            dt = datetime.fromtimestamp(item['dt'])
            date = dt.strftime('%d.%m (%A)').replace('Sunday', '–í—Å').replace('Monday', '–ü–Ω').replace('Tuesday', '–í—Ç').replace('Wednesday', '–°—Ä').replace('Thursday', '–ß—Ç').replace('Friday', '–ü—Ç').replace('Saturday', '–°–±')

            if date not in daily_data:
                daily_data[date] = {period: [] for period in periods}

            for period, (start, end) in periods.items():
                if is_time_period(item['dt'], dt.date(), start, end):
                    daily_data[date][period].append({
                        'temp': item['main']['temp'],
                        'icon': get_weather_icon(item['weather'][0]['icon'])
                    })

        forecast = []
        for date, periods_data in list(daily_data.items())[:5]:
            day_forecast = [f"\nüìÖ {date}:"]
            for period, values in periods_data.items():
                if values:
                    temps = [v['temp'] for v in values]
                    icons = [v['icon'] for v in values]
                    avg_temp = sum(temps)/len(temps)
                    main_icon = max(set(icons), key=icons.count)
                    day_forecast.append(f"{period} {main_icon} {avg_temp:.1f}¬∞C")

            forecast.append("\n".join(day_forecast))

        message = f"üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ {loc_data['name']}:\n" + "\n".join(forecast)
        await query.edit_message_text(message, reply_markup=main_menu_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_menu_keyboard())


def is_time_period(timestamp, target_date, start_hour, end_hour):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–µ—Ä–∏–æ–¥"""
    dt = datetime.fromtimestamp(timestamp)
    if dt.date() != target_date:
        return False
    if start_hour < end_hour:
        return start_hour <= dt.hour < end_hour
    return dt.hour >= start_hour or dt.hour < end_hour

def get_weather_data(request_type, location):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    base_url = 'https://api.openweathermap.org/data/2.5/'
    url = f"{base_url}{request_type}"

    params = {
        'lat': location['lat'],
        'lon': location['lon'],
        'appid': OWM_API_KEY,
        'units': 'metric',
        'lang': 'ru'
    }

    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json()

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(handle_location_choice, pattern='^(grigoropolisskaya|mishelevka)$'))
    application.add_handler(CallbackQueryHandler(handle_forecast_choice))

    application.run_polling()

if __name__ == '__main__':
    main()
